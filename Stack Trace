스택 트레이스란?
프로그램이 실행되던 중 예외가 발생했을 때, 그 예외가 어디서 발생했고 어떻게 거기까지 왔는지를 "함수 호출 순서"대로 기록한 로그.

쉽게 말해 : 예외 발생 시점까지 함수가 호출된 경로를 위에서 아래로 추적하는 함수 호출 기록
            마치 “내가 어떤 함수에서 어떤 함수로 내려왔고, 어디서 죽었는지” 남긴 디지털 족적

왜 생기나?
프로그램은 실행 중에 스택(Stack) 이라는 공간에 함수 호출 정보를 쌓아 
예외가 발생하면 스택에 쌓여 있던 호출 경로를 따라 어디서 문제가 발생했는지를 표시함
그것이 바로 Stack Trace

스택 트레이스 구조 예시
System.DivideByZeroException: 0으로 나눌 수 없습니다.
   at MathUtils.Divide(Int32 a, Int32 b) in MathUtils.cs:line 10
   at Program.Main(String[] args) in Program.cs:line 5

이건 다음을 뜻해:
1. Program.Main()에서 MathUtils.Divide()를 호출했고
2. Divide() 메서드의 10번째 줄에서 예외가 발생함
3. 이 호출 경로를 쫙 보여줌

Stack vs Stack Trace

 개념                         설명                                
 -------------------------    --------------------------------- 
 Stack (스택)                 함수 호출이 쌓이는 구조 (후입선출 LIFO)
--------------------------    ----------------------------------
 Stack Trace (스택 트레이스)  예외 발생 시, 현재까지 쌓인 함수 호출 경로의 기록

void A() => B();
void B() => C();
void C() => throw new Exception("문제 발생!");

A();  // 실행
----------------------
예외 메시지는 이렇게 뜸:
System.Exception: 문제 발생!
   at C()
   at B()
   at A()
→ 즉, A → B → C로 내려오다가 C()에서 예외가 발생했고, 그 경로를 보여줌

스택 트레이스를 알면 좋은 이유

디버깅이 쉬워짐
→ 어떤 함수에서 오류가 발생했는지 정확히 알 수 있음

협업 디버깅에 필수
→ 로그에 찍힌 스택 트레이스로 문제 지점 파악 가능

복잡한 프로그램일수록 효과적
→ 이벤트 핸들러, 콜백, 비동기 처리에도 추적 가능


| 용어                         설명                                          
| --------------------         -------------------------------------------- 
| 스택(Stack)                  함수 호출이 쌓이는 메모리 구조                  
| 스택 트레이스(Stack Trace)    예외 발생 시 그 시점까지 호출된 함수들의 순서
| 목적                         디버깅, 문제 발생 위치 추적                     
| 관련                         throw, try-catch, Exception.StackTrace 
