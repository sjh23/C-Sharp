out 키워드란?
 - 함수에서 값을 반환하는 데 사용되는 매게변수
 - 반드시 메서드 내에서 초기화되어야 함
 - 호출한 쪽에서는 초기화를 안 해도 됨

언제 사용하나?
 1. 여러 개의 값을 반환하고 싶을 때
 2. TryParse 패펀처럼 성공/실패 여부 + 결과 값 같이 주고 싶을 때
 3. 값을 "참조"가 아닌 "명시적으로 반환"하고 싶을 떄

왜 out이 우용한가?
 - 반환할 게 여러 개일 때 굳이 클래스를 만들거나 튜플을 쓰지 않아도 됨.
 - 메모리를 덜 쓰고 성능 부담이 적음 (특히 value type에서)
 - TryParse() 계열 함수 (int.TryParse, DateTime.TryParse)처럼 표준 패턴이 있음.

주의 사항
 - out 파라미터는 메서드 내부에서 반드시 값을 할당해야 함.
 - ref와 비슷하지만, ref는 호출 전에도 초기화되어 있어야 함

언제 out이 효과적?
 - 성능을 따질 때 (튜플보다 효율적임)
 - 메서드가 실패할 수도 있는 경우, 반환값을 bool로 하고 결과를 out로 전달하면 직관적임

=========================================================

ref 키워드란?
 - ref는 **"참조에 의한 전달"**을 의미함
 - 즉, 함수가 매개변수의 원본 값을 직접 수정할 수 있음
 - 호출할 때도 초기화가 되어 있어야 하고, 함수 안에서 그 값을 변경할 수도 있도 안 할 수도 있음

왜 사용하나?
 - 인자로 받은 변수의 값을 직접 수정하고 싶을 때
 - 성능상 이점이 있음 : 복사본이 아니라 원본을 조작
 - 일반 변수, 구조체, 배열, 클래스 인스턴스 등에서 사용 가능

사용 시 장점
 - 복사 오버헤드 없이 성능 최적화 가능 (특히 구조체에서)
 - 호출한 쪽과 함수가 공유된 변수 하나를 함께 사용
 - 상태를 변경하고 결과를 즉시 반영할 때 유리

주의사항
 - 함수 안에서 ref 매개변수를 꼭 수정할 필요는 없음 (선택)
 - 하지만 호출할 때 반드시 초기화된 값을 넘겨야 함
 - 값 타입(예:int, struct)에서 자주 쓰임

ref VS out 간단 비교
구분			ref						out
호출전 초기화	반드시 필요				불필요
함수 내 재할당	선택적					필수
주요 목적		값을 넘기고 수정도 하고 싶을 때	결과값을 반환하고 싶을때
				
